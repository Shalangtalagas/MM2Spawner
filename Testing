local player = game.Players.LocalPlayer
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local itemdatabase = require(game:GetService("ReplicatedStorage").Database.Sync.Item)

-- Item List with Custom Name Mapping
local items = {
    {original = "Harvester", custom = "Harvester"},
    {original = "Gingerscope", custom = "Gingerscope"},
    {original = "Bauble", custom = "Bauble"},
    {original = "Icepiercer", custom = " Icepiercer"},
    {original = "TreeGun2023", custom = "Evergun"},
    {original = "TreeKnife2023", custom = "Evergreen"},
    {original = "TreeGun2023Chroma", custom = "Chroma Evergun"},
    {original = "TreeKnife2023Chroma", custom = "Chroma Evergreen"},
    {original = "Bloom", custom = "Bloom"},
    {original = "Flora", custom = "Flora"},
    {original = "TravelerAxe", custom = "Traveler Axe"},
    {original = "TravelerGun", custom = "Traveler Gun"},
    {original = "TravelerAxeChroma", custom = "Chroma Traveler Axe"},
    {original = "TravelerGunChroma", custom = "Chroma Traveler Gun"},
    {original = "Celestial", custom = "Celestial"},
    {original = "Constellation", custom = "Constellation"},
    {original = "ConstellationChroma", custom = "Chroma Constellation"},
    {original = "BaubleChroma", custom = "Chroma Bauble"},
    {original = "Candy", custom = "Candy"},
    {original = "Sugar", custom = "Sugar"},
    {original = "Darksword", custom = "Darksword"},
    {original = "Darkshot", custom = "Darkshot"},
    {original = "VampireAxe", custom = "Vampire Axe"},
    {original = "VampireGun", custom = "VampirecGun"},
    {original = "SwirlyAxe", custom = "Swirly Axe"},
    {original = "SwirlyGun", custom = "Swirly Gun"},
    {original = "Flowerwood", custom = "Flowerwood"},
    {original = "FlowerwoodGun", custom = "Flowerwood Gun"},
    {original = "VampireGunChroma", custom = "Chroma Vampire Gun"},
    {original = "WatergunChroma", custom = "Chroma Watergun"},
    {original = "Turkey2023", custom = "Turkey"},
    {original = "Sakura_K", custom = "Sakura"},
    {original = "Blossom_G", custom = "Blossom"},
    {original = "ZombieBat", custom = "Bat"},
    {original = "Makeshift", custom = "Makeshift"},
    {original = "Sorry", custom = "Corrupt"}
}

-- Function to get item image
local function getImage(iname)
    for name, info in pairs(itemdatabase) do
        if iname:lower() == name:lower() then
            return info.Image
        end
    end
    return "rbxassetid://0" -- Default image if not found
end

-- Unbox Animation Function
local function playUnboxAnimation(itemName)
    -- Create container frame
    local container = Instance.new("Frame")
    container.Name = "UnboxAnimation"
    container.Size = UDim2.new(0.4, 0, 0.5, 0)
    container.Position = UDim2.new(0.5, 0, 0.5, 0)
    container.AnchorPoint = Vector2.new(0.5, 0.5)
    container.BackgroundTransparency = 1
    container.ZIndex = 100
    container.Parent = player:WaitForChild("PlayerGui"):WaitForChild("MainGUI") or player.PlayerGui

    -- Create box image
    local box = Instance.new("ImageLabel")
    box.Name = "Box"
    box.Size = UDim2.new(1, 0, 1, 0)
    box.BackgroundTransparency = 1
    box.Image = "rbxassetid://14255343935" -- Mystery box image
    box.ZIndex = 101
    box.Parent = container

    -- Create item reveal
    local item = Instance.new("ImageLabel")
    item.Name = "Item"
    item.Size = UDim2.new(0.8, 0, 0.8, 0)
    item.Position = UDim2.new(0.1, 0, 0.1, 0)
    item.BackgroundTransparency = 1
    item.Image = getImage(itemName)
    item.ImageTransparency = 1 -- Start invisible
    item.ZIndex = 102
    item.Parent = container

    -- Create glow effect
    local glow = Instance.new("ImageLabel")
    glow.Name = "Glow"
    glow.Size = UDim2.new(1.5, 0, 1.5, 0)
    glow.Position = UDim2.new(-0.25, 0, -0.25, 0)
    glow.BackgroundTransparency = 1
    glow.Image = "rbxassetid://14255343935" -- Glow image (using same as box for example)
    glow.ImageTransparency = 1 -- Start invisible
    glow.ZIndex = 101
    glow.Parent = container

    -- Create item name label
    local nameLabel = Instance.new("TextLabel")
    nameLabel.Text = itemName
    nameLabel.Size = UDim2.new(1, 0, 0.1, 0)
    nameLabel.Position = UDim2.new(0, 0, 1, 0)
    nameLabel.BackgroundTransparency = 1
    nameLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
    nameLabel.Font = Enum.Font.GothamBlack
    nameLabel.TextSize = 16
    nameLabel.TextTransparency = 1
    nameLabel.ZIndex = 102
    nameLabel.Parent = container

    -- Animation sequence
    local function animate()
        -- Box shake animation
        for i = 1, 5 do
            local shake1 = TweenService:Create(box, TweenInfo.new(0.05), {Position = UDim2.new(0.1, 0, 0.1, 0)})
            local shake2 = TweenService:Create(box, TweenInfo.new(0.05), {Position = UDim2.new(-0.1, 0, -0.1, 0)})
            local shake3 = TweenService:Create(box, TweenInfo.new(0.05), {Position = UDim2.new(0, 0, 0, 0)})
            
            shake1:Play()
            shake1.Completed:Wait()
            shake2:Play()
            shake2.Completed:Wait()
            shake3:Play()
            shake3.Completed:Wait()
        end

        -- Box opens (scale down)
        local boxOpen = TweenService:Create(box, TweenInfo.new(0.3), {Size = UDim2.new(0, 0, 0, 0)})
        boxOpen:Play()

        -- Item reveal with glow
        local itemReveal = TweenService:Create(item, TweenInfo.new(0.5), {ImageTransparency = 0})
        local glowReveal = TweenService:Create(glow, TweenInfo.new(0.5), {ImageTransparency = 0.7})
        local nameReveal = TweenService:Create(nameLabel, TweenInfo.new(0.5), {TextTransparency = 0})
        
        itemReveal:Play()
        glowReveal:Play()
        nameReveal:Play()

        -- Pulsing glow effect
        local pulse1 = TweenService:Create(glow, TweenInfo.new(0.5), {Size = UDim2.new(1.8, 0, 1.8, 0), ImageTransparency = 0.5})
        local pulse2 = TweenService:Create(glow, TweenInfo.new(0.5), {Size = UDim2.new(1.5, 0, 1.5, 0), ImageTransparency = 0.7})
        
        for i = 1, 3 do
            pulse1:Play()
            pulse1.Completed:Wait()
            pulse2:Play()
            pulse2.Completed:Wait()
        end

        -- Fade out
        local fadeOut = TweenService:Create(container, TweenInfo.new(1), {BackgroundTransparency = 1})
        fadeOut:Play()
        fadeOut.Completed:Wait()
        
        container:Destroy()
    end

    animate()
end

-- Create ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "ItemSpawnerGUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = player:WaitForChild("PlayerGui")
screenGui.IgnoreGuiInset = true
screenGui.DisplayOrder = 1000

-- Main GUI
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 240, 0, 180)
mainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
mainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
mainFrame.BackgroundTransparency = 1
mainFrame.ZIndex = 1
mainFrame.Parent = screenGui
Instance.new("UICorner", mainFrame).CornerRadius = UDim.new(0, 10)
local stroke = Instance.new("UIStroke", mainFrame)
stroke.Color = Color3.fromRGB(0, 255, 0)
stroke.Thickness = 1.2

-- Title
local titleLabel = Instance.new("TextLabel")
titleLabel.Text = "ITEM SPAWNER"
titleLabel.Size = UDim2.new(1, 0, 0, 25)
titleLabel.BackgroundTransparency = 1
titleLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
titleLabel.Font = Enum.Font.GothamBlack
titleLabel.TextSize = 16
titleLabel.TextTransparency = 1
titleLabel.ZIndex = 2
titleLabel.Parent = mainFrame

-- Input Box
local inputBox = Instance.new("TextBox")
inputBox.PlaceholderText = "Item Name..."
inputBox.Size = UDim2.new(0.9, 0, 0, 25)
inputBox.Position = UDim2.new(0.05, 0, 0, 35)
inputBox.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
inputBox.TextColor3 = Color3.fromRGB(0, 255, 0)
inputBox.Font = Enum.Font.Gotham
inputBox.TextSize = 12
inputBox.TextTransparency = 1
inputBox.ZIndex = 2
inputBox.Text = ""
inputBox.Parent = mainFrame
Instance.new("UICorner", inputBox).CornerRadius = UDim.new(0, 6)

-- Spawn Button
local spawnButton = Instance.new("TextButton")
spawnButton.Text = "Spawn"
spawnButton.Size = UDim2.new(0.45, 0, 0, 25)
spawnButton.Position = UDim2.new(0.5, 0, 0, 65)
spawnButton.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
spawnButton.TextColor3 = Color3.new(1, 1, 1)
spawnButton.Font = Enum.Font.GothamBlack
spawnButton.TextSize = 12
spawnButton.TextTransparency = 1
spawnButton.ZIndex = 2
spawnButton.Parent = mainFrame
Instance.new("UICorner", spawnButton).CornerRadius = UDim.new(0, 6)

-- Open Table Button
local openButton = Instance.new("TextButton")
openButton.Text = "Open"
openButton.Size = UDim2.new(0.35, 0, 0, 20)
openButton.Position = UDim2.new(0.05, 0, 0, 65)
openButton.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
openButton.TextColor3 = Color3.new(1, 1, 1)
openButton.Font = Enum.Font.GothamBlack
openButton.TextSize = 10
openButton.TextTransparency = 1
openButton.ZIndex = 2
openButton.Parent = mainFrame
Instance.new("UICorner", openButton).CornerRadius = UDim.new(0, 6)

-- Scrollable Item Table
local tableFrame = Instance.new("ScrollingFrame")
tableFrame.Size = UDim2.new(0.9, 0, 0, 100)
tableFrame.Position = UDim2.new(0.05, 0, 0, 100)
tableFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
tableFrame.BackgroundTransparency = 1
tableFrame.BorderSizePixel = 0
tableFrame.CanvasSize = UDim2.new(0, 0, 0, #items * 25)
tableFrame.ScrollBarThickness = 3
tableFrame.ScrollBarImageColor3 = Color3.fromRGB(0, 255, 0)
tableFrame.Visible = false
tableFrame.ZIndex = 3
tableFrame.Parent = mainFrame
Instance.new("UICorner", tableFrame).CornerRadius = UDim.new(0, 6)
local tableStroke = Instance.new("UIStroke", tableFrame)
tableStroke.Color = Color3.fromRGB(0, 255, 0)
tableStroke.Thickness = 0.8

local tableList = Instance.new("UIListLayout")
tableList.FillDirection = Enum.FillDirection.Vertical
tableList.Padding = UDim.new(0, 4)
tableList.SortOrder = Enum.SortOrder.LayoutOrder
tableList.Parent = tableFrame

local tablePadding = Instance.new("UIPadding")
tablePadding.PaddingTop = UDim.new(0, 4)
tablePadding.PaddingLeft = UDim.new(0, 4)
tablePadding.PaddingRight = UDim.new(0, 4)
tablePadding.Parent = tableFrame

-- Function to get original name from custom name
local function getOriginalName(customName)
    for _, item in ipairs(items) do
        if item.custom == customName then
            return item.original
        end
    end
    return customName -- Fallback to input if not found
end

-- Function to get custom name from original name
local function getCustomName(originalName)
    for _, item in ipairs(items) do
        if item.original == originalName then
            return item.custom
        end
    end
    return originalName -- Fallback to original if not found
end

-- Populate item table with custom names
for _, item in ipairs(items) do
    local itemButton = Instance.new("TextButton")
    itemButton.Size = UDim2.new(1, -8, 0, 20)
    itemButton.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    itemButton.Text = item.custom -- Use custom name for display
    itemButton.TextColor3 = Color3.fromRGB(0, 255, 0)
    itemButton.Font = Enum.Font.Gotham
    itemButton.TextSize = 10
    itemButton.TextTransparency = 1
    itemButton.ZIndex = 4
    itemButton.Parent = tableFrame
    Instance.new("UICorner", itemButton).CornerRadius = UDim.new(0, 4)

    itemButton.MouseButton1Click:Connect(function()
        inputBox.Text = item.custom -- Set input box to custom name
        local grow = TweenService:Create(itemButton, TweenInfo.new(0.15, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {Size = UDim2.new(1, -8, 0, 22)})
        grow:Play()
        grow.Completed:Connect(function()
            itemButton:TweenSize(UDim2.new(1, -8, 0, 20), "Out", "Quad", 0.1, true)
        end)
    end)
end

-- Close Button
local closeButton = Instance.new("TextButton")
closeButton.Text = "Close"
closeButton.Size = UDim2.new(0.35, 0, 0, 20)
closeButton.Position = UDim2.new(0.6, 0, 0, 145)
closeButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
closeButton.TextColor3 = Color3.new(1, 1, 1)
closeButton.Font = Enum.Font.GothamBlack
closeButton.TextSize = 10
closeButton.TextTransparency = 1
closeButton.ZIndex = 2
closeButton.Parent = mainFrame
Instance.new("UICorner", closeButton).CornerRadius = UDim.new(0, 6)

-- Progress Bar Table
local progressFrame = Instance.new("Frame")
progressFrame.Size = UDim2.new(0, 240, 0, 40)
progressFrame.Position = UDim2.new(1, -250, 0, 100)
progressFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
progressFrame.BackgroundTransparency = 1
progressFrame.ZIndex = 2
progressFrame.Parent = screenGui
Instance.new("UICorner", progressFrame).CornerRadius = UDim.new(0, 6)

local progressLabel = Instance.new("TextLabel")
progressLabel.Size = UDim2.new(1, 0, 0, 16)
progressLabel.BackgroundTransparency = 1
progressLabel.Text = "Progress: Waiting..."
progressLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
progressLabel.Font = Enum.Font.Gotham
progressLabel.TextSize = 10
progressLabel.TextTransparency = 1
progressLabel.ZIndex = 2
progressLabel.Parent = progressFrame

local barBG = Instance.new("Frame")
barBG.Size = UDim2.new(0.95, 0, 0, 8)
barBG.Position = UDim2.new(0.025, 0, 0, 20)
barBG.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
barBG.BackgroundTransparency = 1
barBG.ZIndex = 2
barBG.Parent = progressFrame
Instance.new("UICorner", barBG).CornerRadius = UDim.new(1, 0)

local barFill = Instance.new("Frame")
barFill.Size = UDim2.new(0, 0, 1, 0)
barFill.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
barFill.BackgroundTransparency = 1
barFill.ZIndex = 2
barFill.Parent = barBG
Instance.new("UICorner", barFill).CornerRadius = UDim.new(1, 0)

-- Toggle Table Visibility
local isTableOpen = false
openButton.MouseButton1Click:Connect(function()
    isTableOpen = not isTableOpen
    openButton.Text = isTableOpen and "Close Table" or "Open"
    tableFrame.Visible = isTableOpen

    local mainFrameHeight = isTableOpen and 250 or 180
    local closeButtonY = isTableOpen and 215 or 145
    local progressFrameY = isTableOpen and 170 or 100

    TweenService:Create(mainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
        Size = UDim2.new(0, 240, 0, mainFrameHeight)
    }):Play()
    TweenService:Create(closeButton, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
        Position = UDim2.new(0.6, 0, 0, closeButtonY)
    }):Play()
    TweenService:Create(progressFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
        Position = UDim2.new(1, -250, 0, progressFrameY)
    }):Play()

    local grow = TweenService:Create(openButton, TweenInfo.new(0.15, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {Size = UDim2.new(0.37, 0, 0, 22)})
    grow:Play()
    grow.Completed:Connect(function()
        openButton:TweenSize(UDim2.new(0.35, 0, 0, 20), "Out", "Quad", 0.1, true)
    end)
end)

-- Drag Functionality
local dragToggle, dragStart, startPos
local function updateInput(input)
    local delta = input.Position - dragStart
    local position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    TweenService:Create(mainFrame, TweenInfo.new(0.25), {Position = position}):Play()
end

mainFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragToggle = true
        dragStart = input.Position
        startPos = mainFrame.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragToggle = false
            end
        end)
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        if dragToggle then
            updateInput(input)
        end
    end
end)

-- Spawn and Equip Function
local function spawnAndEquipItem(name)
    local DataBase, PlayerData = require(game:GetService("ReplicatedStorage").Database.Sync.Item), require(game:GetService("ReplicatedStorage").Modules.ProfileData)
    local PlayerWeapons = PlayerData.Weapons

    -- Spawn the item
    if not PlayerWeapons.Owned[name] then
        PlayerWeapons.Owned[name] = 1
    else
        PlayerWeapons.Owned[name] += 1
    end

    -- Equip the item
    if string.find(name, "Gun") then
        PlayerWeapons.Equipped.Gun = name
    elseif string.find(name, "Axe") or string.find(name, "Sword") or string.find(name, "Knife") or string.find(name, "Blade") then
        PlayerWeapons.Equipped.Melee = name
    end

    -- Update player data
    game:GetService("RunService"):BindToRenderStep("InventoryUpdate", 0, function()
        PlayerData.Weapons = PlayerWeapons
    end)

    -- Respawn to see changes
    game.Players.LocalPlayer.Character:BreakJoints()
end

-- Progress Bar Animation
local function showProgress(customName)
    local originalName = getOriginalName(customName) -- Convert custom name to original for spawning
    
    -- Show progress bar
    TweenService:Create(progressFrame, TweenInfo.new(0.3), {BackgroundTransparency = 0}):Play()
    TweenService:Create(progressLabel, TweenInfo.new(0.3), {TextTransparency = 0}):Play()
    TweenService:Create(barBG, TweenInfo.new(0.3), {BackgroundTransparency = 0}):Play()
    TweenService:Create(barFill, TweenInfo.new(0.3), {BackgroundTransparency = 0}):Play()

    local percent = 0
    while percent < 100 do
        percent += math.random(5, 15)
        percent = math.clamp(percent, 0, 100)
        progressLabel.Text = "Spawning: " .. customName .. " (" .. percent .. "%)" -- Show custom name in progress
        barFill:TweenSize(UDim2.new(percent / 100, 0, 1, 0), "Out", "Quad", 0.1, true)
        task.wait(0.5)
    end

    progressLabel.Text = "Spawned & Equipped: " .. customName -- Show custom name when done
    
    -- Play unbox animation before spawning
    playUnboxAnimation(customName)
    
    -- Spawn and equip using original name
    spawnAndEquipItem(originalName)

    task.delay(0.4, function()
        TweenService:Create(progressFrame, TweenInfo.new(0.3), {BackgroundTransparency = 1}):Play()
        TweenService:Create(progressLabel, TweenInfo.new(0.3), {TextTransparency = 1}):Play()
        TweenService:Create(barBG, TweenInfo.new(0.3), {BackgroundTransparency = 1}):Play()
        TweenService:Create(barFill, TweenInfo.new(0.3), {BackgroundTransparency = 1}):Play()
    end)
end

-- Button Connections
spawnButton.MouseButton1Click:Connect(function()
    local itemName = inputBox.Text
    if itemName == "" then return end

    local grow = TweenService:Create(spawnButton, TweenInfo.new(0.15, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {Size = UDim2.new(0.47, 0, 0, 27)})
    grow:Play()
    grow.Completed:Connect(function()
        spawnButton:TweenSize(UDim2.new(0.45, 0, 0, 25), "Out", "Quad", 0.1, true)
    end)

    showProgress(itemName) -- Pass custom name to progress
    inputBox.Text = ""
end)

closeButton.MouseButton1Click:Connect(function()
    screenGui:Destroy()
end)

-- Initial Animation
mainFrame:TweenPosition(UDim2.new(0.5, 0, 0.5, 0), "Out", "Quad", 0.3, true)
TweenService:Create(mainFrame, TweenInfo.new(0.3), {BackgroundTransparency = 0}):Play()

for _, v in ipairs(mainFrame:GetDescendants()) do
    if v:IsA("TextLabel") or v:IsA("TextButton") or v:IsA("TextBox") then
        TweenService:Create(v, TweenInfo.new(0.3), {TextTransparency = 0}):Play()
    end
end
