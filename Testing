-- Combined Item Spawner with Equip Functionality
-- Combines the trade value calculator with item spawning functionality

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

-- Item database and spawn functions
local boxmodule = require(game:GetService("ReplicatedStorage").Modules.BoxModule)
local hi = getsenv(game:GetService("Players").LocalPlayer.PlayerGui.MainGUI.Inventory.NewItem)._G
local itemdatabase = require(game:GetService("ReplicatedStorage").Database.Sync.Item)
local PlayerData = require(game:GetService("ReplicatedStorage").Modules.ProfileData)

-- Item values (from the first script)
local ancientValues = {
    ["Corrupt"] = 900,
    ["Gingerscope"] = 9300,
    ["Traveler's Axe"] = 6200,
    ["Harvester"] = 725,
    ["Celestial"] = 625,
    ["Icepiercer"] = 625,
    ["Vampire's Axe"] = 425,
    ["Icebreaker"] = 125,
    ["Swirly Axe"] = 80,
    ["Batwing"] = 65,
    ["Elderwood Scythe"] = 65,
    ["Hallowscythe"] = 48,
    ["Logchopper"] = 25,
    ["Icewing"] = 5,
    ["Traveler's Gun"] = 3600,
    ["Evergun"] = 2450,
    ["Turkey"] = 1650,
    ["Evergreen"] = 975,
    ["Blossom"] = 790,
    ["Sakura"] = 780,
    ["Vampire's Gun"] = 475,
    ["Constellation"] = 475,
    ["Bauble"] = 425,
    ["Darkshot"] = 490,
    ["Darksword"] = 465,
    ["Bloom"] = 375,
    ["Flora"] = 375,
    ["Bat"] = 275,
    ["Rainbow Gun"] = 225,
    ["Rainbow"] = 220,
    ["Candy"] = 190,
    ["Heartblade"] = 130,
    ["Flowerwood Gun"] = 140,
    ["Ocean"] = 140,
    ["Soul"] = 140,
    ["Spirit"] = 140,
    ["Flowerwood"] = 135,
    ["Waves"] = 135,
    ["Borealis"] = 110,
    ["Sugar"] = 100,
    ["Australis"] = 105,
    ["Luger"] = 70,
    ["Red Luger"] = 60,
    ["Swirly Gun"] = 60,
    ["Iceblaster"] = 65,
    ["Candleflame"] = 65,
    ["Elderwood Blade"] = 65,
    ["Makeshift"] = 65,
    ["Watergun"] = 70,
    ["Pearl"] = 63,
    ["Pearlshine"] = 63,
    ["Darkbringer"] = 60,
    ["Elderwood Revolver"] = 60,
    ["Phantom"] = 60,
    ["Spectre"] = 60,
    ["Lightbringer"] = 55,
    ["Swirly Blade"] = 45,
    ["Green Luger"] = 40,
    ["Hallowgun"] = 27,
    ["Laser"] = 32,
    ["Icebeam"] = 28,
    ["Iceflake"] = 28,
    ["Plasmabeam"] = 28,
    ["Plasmablade"] = 28,
    ["Amerilaser"] = 28,
    ["Blaster"] = 25,
    ["Nightblade"] = 25,
    ["Old Glory"] = 25,
    ["Nebula"] = 23,
    ["Shark"] = 27,
    ["Virtual"] = 23,
    ["Cookiecane"] = 23,
    ["Gingermint"] = 23,
    ["Gemstone"] = 25,
    ["Clockwork"] = 22,
    ["Eternalcane"] = 23,
    ["Ginger Luger"] = 23,
    ["Lugercane"] = 23,
    ["Pixel"] = 23,
    ["Slasher"] = 23,
    ["Gingerblade"] = 22,
    ["Heat"] = 20,
    ["BattleAxe II"] = 18,
    ["Deathshard"] = 20,
    ["Minty"] = 20,
    ["Tides"] = 15,
    ["Fang"] = 18,
    ["Jinglegun"] = 17,
    ["Spider"] = 17,
    ["Chill"] = 17,
    ["Bioblade"] = 15,
    ["Vampire's Edge"] = 15,
    ["Pumpking"] = 12,
    ["Frostsaber"] = 15,
    ["BattleAxe"] = 13,
    ["Flames"] = 10,
    ["Hallow's Edge"] = 10,
    ["Ice Dragon"] = 10,
    ["Ice Shard"] = 12,
    ["Winter's Edge"] = 12,
    ["Xmas"] = 12,
    ["Hallow's Blade"] = 10,
    ["Handsaw"] = 10,
    ["Eternal"] = 8,
    ["Eternal II"] = 8,
    ["Eternal III"] = 10,
    ["Eternal IV"] = 10,
    ["Boneblade"] = 7,
    ["Ghostblade"] = 7,
    ["Eggblade"] = 7,
    ["Frostbite"] = 7,
    ["Prismatic"] = 7,
    ["Saw"] = 7,
    ["Snowflake"] = 7,
    ["Peppermint"] = 5,
    ["Cookieblade"] = 4,
    ["Blue Seer"] = 3,
    ["Purple Seer"] = 3,
    ["Red Seer"] = 3,
    ["Seer"] = 3,
    ["Orange Seer"] = 2,
    ["Yellow Seer"] = 2,
    ["Chroma Traveler's Gun"] = 140000,
    ["Chroma Evergun"] = 55000,
    ["Chroma Evergreen"] = 34000,
    ["Chroma Vampire's Gun"] = 15500,
    ["Chroma Bauble"] = 11000,
    ["Chroma Constellation"] = 10000,
    ["Chroma Watergun"] = 2500,
    ["Chroma Darkbringer"] = 110,
    ["Chroma Lightbringer"] = 105,
    ["Chroma Luger"] = 95,
    ["Chroma Laser"] = 75,
    ["Chroma Candleflame"] = 65,
    ["Chroma Elderwood Blade"] = 65,
    ["Chroma Swirly Gun"] = 65,
    ["Chroma Cookiecane"] = 64,
    ["Chroma Deathshard"] = 60,
    ["Chroma Heat"] = 65,
    ["Chroma Shark"] = 65,
    ["Chroma Slasher"] = 60,
    ["Chroma Tides"] = 60,
    ["Chroma Fang"] = 60,
    ["Chroma Gemstone"] = 55,
    ["Chroma Gingerblade"] = 50,
    ["Chroma Seer"] = 55,
    ["Chroma Boneblade"] = 40,
    ["Chroma Saw"] = 50,
    ["Ghost"] = 10,
    ["America"] = 8,
    ["Blood"] = 8,
    ["Phaser"] = 7,
    ["Shadow"] = 6,
    ["Prince"] = 5,
    ["Cowboy"] = 4,
    ["Golden"] = 4,
    ["Splitter"] = 3,
    ["JD"] = 65,
    ["Latte Gun"] = 120,
    ["Latte Knife"] = 120,
    ["Cotton Candy"] = 65,
    ["Beach"] = 30,
    ["Cavern Knife"] = 25,
    ["Witched"] = 20,
    ["Skulls"] = 10,
    ["Icedriller"] = 8,
    ["Spectral Knife"] = 8,
    ["Vampire Gun"] = 8,
    ["Green Elite"] = 7,
    ["Santa's Spirit"] = 7,
    ["Aurora Gun"] = 6,
    ["Ginger Gun"] = 6,
    ["Blue Elite"] = 6,
    ["Ghost Knife"] = 6,
    ["Traveler Gun"] = 5,
    ["Broken"] = 5,
    ["Santa's Magic"] = 5,
    ["Red Scratch"] = 4,
    ["Red Fire"] = 3,
    ["Arctic Gun"] = 2,
    ["Icecracker"] = 2,
    ["Nightsky"] = 2,
    ["Blue Scratch"] = 2,
    ["Ghost Gun"] = 2,
    ["Rupture"] = 1,
    ["Tree Gun"] = 1,
    ["Tree Knife"] = 1,
    ["Web"] = 1,
    ["Chromatic Knife"] = 1,
    ["Cursed Knife"] = 1,
    ["Frostfade Knife"] = 1,
    ["Vampire Knife"] = 1,
    ["Cavern Gun"] = 1,
    ["Cane"] = 575,
    ["Silent Night"] = 60,
    ["Aurora"] = 28,
    ["Icicles"] = 25,
    ["Dungeon"] = 20,
    ["Candy Swirl"] = 20,
    ["Toxic"] = 20,
    ["Vampire"] = 20,
    ["Snakebite"] = 17,
    ["Monster"] = 17,
    ["Magma"] = 10,
    ["Bats"] = 7,
    ["Green Marble"] = 7,
    ["Jack"] = 4,
    ["Orange Marble"] = 3,
    ["Floral"] = 2,
    ["Starry"] = 2,
    ["Darkknife"] = 1,
    ["Gingerbread"] = 1,
    ["Mummy"] = 1,
    ["Zombified Knife"] = 55,
    ["Bones"] = 50,
    ["Gingerbread Knife"] = 50,
    ["Brains"] = 40,
    ["Sweater Knife"] = 35,
    ["Branches"] = 25,
    ["Frozen Gun"] = 22,
    ["Lights Gun"] = 20,
    ["Mummy Gun"] = 20,
    ["Zombie Gun"] = 20,
    ["Potion Knife"] = 17,
    ["Zombified Gun"] = 15,
    ["Potion"] = 6,
    ["Void"] = 8,
    ["Frozen Knife"] = 5,
    ["Gingerbread Gun"] = 5,
    ["Zombie Knife"] = 5,
    ["Lights Knife"] = 4,
    ["Mummy Knife"] = 4,
    ["Moons"] = 4,
    ["Webs"] = 3,
    ["Holly Gun"] = 3,
    ["Snowflake"] = 3,
    ["Wolf"] = 3,
    ["Vampire"] = 3,
    ["Nutcracker"] = 1,
    ["Snowman Gun"] = 1,
    ["Snowman Knife"] = 1,
    ["Snowy"] = 1,
    ["Wrapped Gun"] = 1,
    ["Wrapped Knife"] = 1,
    ["Gifted"] = 1,
    ["Glitch2"] = 60,
    ["Glitch1"] = 60,
    ["Bats"] = 170,
    ["Gifts"] = 140,
    ["Pine"] = 140,
    ["Sparkle9"] = 35,
    ["Sparkle8"] = 25,
    ["Sparkle10"] = 25,
    ["Ghoulish"] = 25,
    ["Skool"] = 20,
    ["Sparkle7"] = 20,
    ["RIP"] = 18,
    ["Tailslide"] = 17,
    ["Coal"] = 15,
    ["Ollie"] = 15,
    ["Sidewinder"] = 15,
    ["Sparkle5"] = 13,
    ["Elf"] = 13,
    ["Grave"] = 12,
    ["CandyCorn"] = 10,
    ["Sparkle4"] = 8,
    ["Asteroid"] = 8,
    ["Euro"] = 8,
    ["Slime"] = 7,
    ["Grind"] = 6,
    ["Haunted"] = 5,
    ["Combat II"] = 5,
    ["Prism"] = 4,
    ["Zombie"] = 4,
    ["Snowman"] = 3,
    ["Wrapped"] = 3,
    ["Bones"] = 3,
    ["Brains"] = 3,
    ["Neon"] = 3,
    ["Ecto"] = 3,
    ["Witch"] = 3,
    ["Indy"] = 3,
    ["Hearts"] = 2,
    ["Tulip"] = 2,
    ["Goo"] = 2,
    ["Patrick"] = 2,
    ["Reptile"] = 2,
    ["Bunny"] = 1,
    ["Choco"] = 1,
    ["Roses"] = 1,
    ["Alex"] = 1,
    ["Corl"] = 1,
    ["Denis"] = 1,
    ["Ornament"] = 1,
    ["Ornament1"] = 1,
    ["Ornament2"] = 1,
    ["Passion"] = 1,
    ["Sketchy"] = 1,
    ["Sub"] = 1,
    ["Sweetheart"] = 1,
    ["Valentine"] = 1,
    ["2015"] = 1,
    ["Santa"] = 1,
    ["Infected"] = 1,
    ["TNL"] = 1,
    ["Zombie Dog"] = 200,
    ["Elf"] = 120,
    ["Blue Pumpkin"] = 75,
    ["Black Cat"] = 60,
    ["Dogey"] = 60,
    ["Red Pumpkin"] = 55,
    ["Green Pumpkin"] = 45,
    ["Santa"] = 35,
    ["Jetstream"] = 35,
    ["Purple Pumpkin"] = 30,
    ["Vampire Bat"] = 30,
    ["Rudolph"] = 25,
    ["Eyeball"] = 25,
    ["Overseer Eye"] = 25,
    ["Nobledragon"] = 25,
    ["Pumpkin"] = 20,
    ["Piggy"] = 20,
    ["Reindeer"] = 20,
    ["Fairy"] = 20,
    ["Seahorsey"] = 18,
    ["Chilly"] = 17,
    ["Pengy"] = 17,
    ["Tankie"] = 15,
    ["<3"] = 12,
    ["Mechbug"] = 8,
    ["UFO"] = 7,
    ["Deathspeaker"] = 5,
    ["Phoenix"] = 4,
    ["Frostbird"] = 3,
    ["Electro"] = 2,
    ["Sammy"] = 2,
    ["Steambird"] = 2,
    ["Badger"] = 1,
    ["Ice Phoenix"] = 1,
    ["Skelly"] = 1,
    ["Traveller"] = 1,
    ["Fire Bat"] = 1,
    ["Fire Cat"] = 1,
    ["Fire Bear"] = 1,
    ["Fire Bunny"] = 1,
    ["Fire Dog"] = 1,
    ["Fire Fox"] = 1,
    ["Fire Pig"] = 1,
    ["Ghosty"] = 1,
    ["Chroma Fire Bunny"] = 20,
    ["Chroma Fire Cat"] = 20,
    ["Chroma Fire Dog"] = 18,
    ["Chroma Fire Fox"] = 17,
    ["Chroma Fire Bat"] = 15,
    ["Chroma Fire Pig"] = 13,
    ["Chroma Fire Bear"] = 12,
}

-- Item List with Custom Name Mapping
local items = {
    {original = "Harvester", custom = "Harvester"},
    {original = "Gingerscope", custom = "Gingerscope"},
    {original = "Bauble", custom = "Bauble"},
    {original = "Icepiercer", custom = " Icepiercer"},
    {original = "TreeGun2023", custom = "Evergun"},
    {original = "TreeKnife2023", custom = "Evergreen"},
    {original = "TreeGun2023Chroma", custom = "Chroma Evergun"},
    {original = "TreeKnife2023Chroma", custom = "Chroma Evergreen"},
    {original = "Bloom", custom = "Bloom"},
    {original = "Flora", custom = "Flora"},
    {original = "TravelerAxe", custom = "Traveler Axe"},
    {original = "TravelerGun", custom = "Traveler Gun"},
    {original = "TravelerAxeChroma", custom = "Chroma Traveler Axe"},
    {original = "TravelerGunChroma", custom = "Chroma Traveler Gun"},
    {original = "Celestial", custom = "Celestial"},
    {original = "Constellation", custom = "Constellation"},
    {original = "ConstellationChroma", custom = "Chroma Constellation"},
    {original = "BaubleChroma", custom = "Chroma Bauble"},
    {original = "Candy", custom = "Candy"},
    {original = "Sugar", custom = "Sugar"},
    {original = "Darksword", custom = "Darksword"},
    {original = "Darkshot", custom = "Darkshot"},
    {original = "VampireAxe", custom = "Vampire Axe"},
    {original = "VampireGun", custom = "Vampire Gun"},
    {original = "SwirlyAxe", custom = "Swirly Axe"},
    {original = "SwirlyGun", custom = "Swirly Gun"},
    {original = "Flowerwood", custom = "Flowerwood"},
    {original = "FlowerwoodGun", custom = "Flowerwood Gun"},
    {original = "VampireGunChroma", custom = "Chroma Vampire Gun"},
    {original = "WatergunChroma", custom = "Chroma Watergun"},
    {original = "Turkey2023", custom = "Turkey"},
    {original = "Sakura_K", custom = "Sakura"},
    {original = "Blossom_G", custom = "Blossom"},
    {original = "ZombieBat", custom = "Bat"},
    {original = "Makeshift", custom = "Makeshift"},
    {original = "Sorry", custom = "Corrupt"}
}

-- Spawn functions from the second script
function getrandombox()
    local boxes = require(game:GetService("ReplicatedStorage").Database.Sync.MysteryBox)
    local keys = {}
    for k, _ in pairs(boxes) do
        table.insert(keys, k)
    end
    return keys[math.random(1, #keys)]
end

function opencrate(ITEM_NAME)
    boxmodule.OpenBox(getrandombox(), ITEM_NAME)
    hi.NewItem(ITEM_NAME, nil, nil, 'Weapons', 1)
end

function getrawnamebyrealname(realname)
    for i, _ in pairs(itemdatabase) do
        if realname:lower() == i:lower() then
            return i
        end
    end
end

function getImage(iname)
    for name, info in pairs(itemdatabase) do
        if iname:lower() == name:lower() then
            return info.Image
        end
    end
end

function fakeItem()
    local jj = Instance.new("Frame")
    jj.Name = "NewItem"
    local gui = game:GetService("Players").LocalPlayer.PlayerGui.MainGUI
    if gui:FindFirstChild("Game") and gui.Game:FindFirstChild("Inventory") then
        jj.Parent = gui.Game.Inventory.Main.Weapons.Items.Container.Classic.Container
    elseif gui:FindFirstChild("Lobby") and gui.Lobby.Screens:FindFirstChild("Inventory") then
        jj.Parent = gui.Lobby.Screens.Inventory.Main.Weapons.Items.Container.Classic.Container
    end
    jj.Size = UDim2.new(0.2, 0, 0.25, 0)
    jj.BackgroundTransparency = 1

    local kk = Instance.new("Frame", jj)
    kk.Name = "Container"
    kk.Position = UDim2.new(0, 3, 0, 3)
    kk.Size = UDim2.new(1, -6, 0.825, -6)
    kk.BackgroundColor3 = Color3.fromRGB(57, 57, 57)
    kk.BorderSizePixel = 2

    local ll = Instance.new("ImageLabel", kk)
    ll.Name = "Icon"
    ll.Size = UDim2.new(1, 0, 1, 0)
    ll.Position = UDim2.new(0.5, 0, 0.5, 0)
    ll.AnchorPoint = Vector2.new(0.5, 0.5)
    ll.Image = getImage(getgenv().newValue)
    ll.BackgroundTransparency = 1

    local hh = Instance.new("TextLabel", kk)
    hh.Name = "Amount"
    hh.Size = UDim2.new(0.5, 0, 0.225, 0)
    hh.Position = UDim2.new(1, -4, 0, 3)
    hh.AnchorPoint = Vector2.new(1, 0)
    hh.BackgroundTransparency = 1
    hh.TextColor3 = Color3.new(1, 1, 1)
    hh.TextScaled = true
    hh.Text = ""

    local gg = Instance.new("Frame", jj)
    gg.Name = "ItemName"
    gg.Position = UDim2.new(0, 3, 0.8, 3)
    gg.Size = UDim2.new(1, -6, 0.2, -4)
    gg.BorderSizePixel = 2

    for name, info in pairs(itemdatabase) do
        if getgenv().newValue:lower() == name:lower() then
            if info.Rarity == "Godly" then
                gg.BackgroundColor3 = Color3.fromRGB(255, 0, 179)
            elseif info.Rarity == "Ancient" then
                gg.BackgroundColor3 = Color3.fromRGB(100, 10, 255)
            end
        end
    end

    local bg = Instance.new("ImageLabel", gg)
    bg.Size = UDim2.new(1, 0, 1, 0)
    bg.Image = "rbxassetid://2957790421"
    bg.BackgroundTransparency = 1

    local lb = Instance.new("TextLabel", gg)
    lb.Name = "Label"
    lb.Position = UDim2.new(0.5, 0, 0.5, 0)
    lb.AnchorPoint = Vector2.new(0.5, 0.5)
    lb.Size = UDim2.new(0.9, 0, 0.9, 0)
    lb.BackgroundTransparency = 1
    lb.TextColor3 = Color3.new(1, 1, 1)
    lb.TextStrokeTransparency = 0.7
    lb.Font = Enum.Font.SourceSansBold
    lb.Text = getgenv().newValue
    lb.TextScaled = true
end

-- Function to get original name from custom name
local function getOriginalName(customName)
    for _, item in ipairs(items) do
        if item.custom == customName then
            return item.original
        end
    end
    return customName -- Fallback to input if not found
end

-- Function to get custom name from original name
local function getCustomName(originalName)
    for _, item in ipairs(items) do
        if item.original == originalName then
            return item.custom
        end
    end
    return originalName -- Fallback to original if not found
end

-- Create the GUI
local Window = Rayfield:CreateWindow({
   Name = "Item Spawner with Values",
   Icon = 0,
   LoadingTitle = "Loading Item Spawner",
   LoadingSubtitle = "by Heavenbatumbading",
   Theme = "Ocean",
   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false
})

local Tab = Window:CreateTab("Main", 4483362458)
Tab:CreateSection("Item Spawner with Value Calculator")

-- Create input for item name
local itemInput = Tab:CreateInput({
   Name = "Item Name",
   CurrentValue = "",
   PlaceholderText = "Enter item name",
   RemoveTextAfterFocusLost = false,
   Callback = function(Value)
       getgenv().newValue = getrawnamebyrealname(Value)
   end,
})

-- Create button to spawn item
Tab:CreateButton({
   Name = "Spawn Item",
   Callback = function()
       if getgenv().newValue and getgenv().newValue ~= "" then
           opencrate(getgenv().newValue)
           fakeItem()
           
           -- Show success message
           Rayfield:Notify({
               Title = "Item Spawned",
               Content = "Successfully spawned " .. getgenv().newValue,
               Duration = 3,
               Image = 0,
               Actions = {
                   Ignore = {
                       Name = "Okay",
                       Callback = function()
                       end
                   },
               },
           })
       else
           Rayfield:Notify({
               Title = "Error",
               Content = "Please enter a valid item name",
               Duration = 3,
               Image = 0,
               Actions = {
                   Ignore = {
                       Name = "Okay",
                       Callback = function()
                       end
                   },
               },
           })
       end
   end,
})

-- Create dropdown with item list
local itemDropdown = Tab:CreateDropdown({
   Name = "Item List",
   Options = {},
   CurrentOption = "Select an item",
   MultipleOptions = false,
   Flag = "ItemList",
   Callback = function(Option)
       itemInput:Set(Option)
       getgenv().newValue = getrawnamebyrealname(Option)
   end,
})

-- Populate dropdown with custom names
local dropdownOptions = {}
for _, item in ipairs(items) do
    table.insert(dropdownOptions, item.custom)
end
itemDropdown:Refresh(dropdownOptions, true)

-- Create section for value calculator
Tab:CreateSection("Item Value Calculator")

-- Create input for checking item value
local valueInput = Tab:CreateInput({
   Name = "Check Item Value",
   CurrentValue = "",
   PlaceholderText = "Enter item name to check value",
   RemoveTextAfterFocusLost = false,
   Callback = function(Value)
   end,
})

-- Create button to check value
Tab:CreateButton({
   Name = "Check Value",
   Callback = function()
       local itemName = valueInput.CurrentValue
       if itemName and itemName ~= "" then
           local isChroma = string.find(itemName:lower(), "chroma") ~= nil
           local baseName = itemName
           if isChroma then
               baseName = string.gsub(itemName, "chroma ", "", 1)
           end
           
           local value = ancientValues[baseName] or (isChroma and ancientValues["Chroma " .. baseName])
           
           if value then
               Rayfield:Notify({
                   Title = "Item Value",
                   Content = itemName .. " value: " .. tostring(value),
                   Duration = 5,
                   Image = 0,
                   Actions = {
                       Ignore = {
                           Name = "Okay",
                           Callback = function()
                           end
                       },
                   },
               })
           else
               Rayfield:Notify({
                   Title = "Value Not Found",
                   Content = "Could not find value for " .. itemName,
                   Duration = 3,
                   Image = 0,
                   Actions = {
                       Ignore = {
                           Name = "Okay",
                           Callback = function()
                           end
                       },
                   },
               })
           end
       else
           Rayfield:Notify({
               Title = "Error",
               Content = "Please enter an item name",
               Duration = 3,
               Image = 0,
               Actions = {
                   Ignore = {
                       Name = "Okay",
                       Callback = function()
                       end
                   },
               },
           })
       end
   end,
})

-- Create button to equip all spawned items
Tab:CreateButton({
   Name = "Equip All Items",
   Callback = function()
       -- This would require knowing how the game handles equipping items
       -- You might need to call specific functions or fire specific remote events
       Rayfield:Notify({
           Title = "Equip All",
           Content = "Attempting to equip all items in inventory",
           Duration = 3,
           Image = 0,
           Actions = {
               Ignore = {
                   Name = "Okay",
                   Callback = function()
                   end
               },
           },
       })
       
       -- Example of how you might equip items (game-specific)
       local inventory = PlayerData.Weapons.Owned
       for itemName, _ in pairs(inventory) do
           -- This part would need to be customized for the specific game
           -- You might need to call a function like:
           -- game:GetService("ReplicatedStorage").Remotes.EquipItem:FireServer(itemName)
       end
   end,
})

-- Create button to refresh inventory
Tab:CreateButton({
   Name = "Refresh Inventory",
   Callback = function()
       -- This would force the game to update your inventory display
       Rayfield:Notify({
           Title = "Refreshing",
           Content = "Refreshing inventory display",
           Duration = 2,
           Image = 0,
           Actions = {
               Ignore = {
                   Name = "Okay",
                   Callback = function()
                   end
               },
           },
       })
       
       -- Example of how you might refresh (game-specific)
       -- This might involve re-requesting inventory data from the server
   end,
})

-- Create section for trade value calculator
Tab:CreateSection("Trade Value Calculator")

-- This would require implementing the trade GUI scanning functionality from the first script
-- You would need to adapt it to work with Rayfield

-- Create button to scan current trade
Tab:CreateButton({
   Name = "Scan Current Trade",
   Callback = function()
       -- This would scan the trade GUI and show values
       Rayfield:Notify({
           Title = "Trade Scanner",
           Content = "This feature would scan the trade GUI and show values",
           Duration = 3,
           Image = 0,
           Actions = {
               Ignore = {
                   Name = "Okay",
                   Callback = function()
                   end
               },
           },
       })
       
       -- You would need to implement the trade scanning logic here
   end,
})

-- Create label to show trade values
local tradeValueLabel = Tab:CreateLabel("Trade values will appear here when scanning")

-- Create toggle for auto-scan trades
Tab:CreateToggle({
   Name = "Auto-Scan Trades",
   CurrentValue = false,
   Flag = "AutoScanTrades",
   Callback = function(Value)
       if Value then
           Rayfield:Notify({
               Title = "Auto-Scan Enabled",
               Content = "Will automatically scan trades when they appear",
               Duration = 2,
               Image = 0,
               Actions = {
                   Ignore = {
                       Name = "Okay",
                       Callback = function()
                       end
                   },
               },
           })
       else
           Rayfield:Notify({
               Title = "Auto-Scan Disabled",
               Content = "Will no longer automatically scan trades",
               Duration = 2,
               Image = 0,
               Actions = {
                   Ignore = {
                       Name = "Okay",
                       Callback = function()
                       end
                   },
               },
           })
       end
   end,
})
