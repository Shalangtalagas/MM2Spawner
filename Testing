local success, Rayfield = pcall(function()
    return loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
end)

if not success or not Rayfield then
    warn("Failed to load Rayfield UI Library")
    return
end

-- Initialize other required services and modules with error handling
local function safeRequire(module)
    local success, result = pcall(function() return require(module) end)
    return success and result or nil
end

local boxmodule = safeRequire(game:GetService("ReplicatedStorage").Modules.BoxModule)
local itemdatabase = safeRequire(game:GetService("ReplicatedStorage").Database.Sync.Item)

if not boxmodule or not itemdatabase then
    warn("Essential game modules not found")
    return
end

-- Try to get the inventory script environment safely
local hi
local success, env = pcall(function()
    return getsenv(game:GetService("Players").LocalPlayer.PlayerGui.MainGUI.Inventory.NewItem)
end)
if success and env then
    hi = env._G
else
    warn("Could not access inventory script environment")
    hi = {NewItem = function() warn("Fake NewItem called") end} -- Fallback
end

getgenv().newValue = ""

-- Set up remote events with error handling
local replicatedStorage = game:GetService("ReplicatedStorage")
local remoteEvents = replicatedStorage:WaitForChild("RemoteEvents", 5) or warn("RemoteEvents not found")
local equipRemote = remoteEvents and remoteEvents:WaitForChild("EquipWeapon", 5) or warn("EquipWeapon remote not found")
local inventoryRemote = remoteEvents and remoteEvents:WaitForChild("InventoryUpdate", 5) or warn("InventoryUpdate remote not found")

-- Function to get a random box safely
local function getrandombox()
    local boxes = safeRequire(game:GetService("ReplicatedStorage").Database.Sync.MysteryBox)
    if not boxes then return nil end
    
    local keys = {}
    for k in pairs(boxes) do
        table.insert(keys, k)
    end
    return #keys > 0 and keys[math.random(1, #keys)] or nil
end

-- Improved crate opening with error handling
local function opencrate(ITEM_NAME)
    if not ITEM_NAME or ITEM_NAME == "" then
        warn("No item name provided to opencrate")
        return false
    end

    local boxName = getrandombox()
    if not boxName then
        warn("Could not find a valid box to open")
        return false
    end

    local success, err = pcall(function()
        boxmodule.OpenBox(boxName, ITEM_NAME)
        hi.NewItem(ITEM_NAME, nil, nil, 'Weapons', 1)
    end)

    if not success then
        warn("Error in opencrate:", err)
        return false
    end

    return true
end

-- Improved item equipping function
local function equipItem(itemName)
    if not itemName or itemName == "" then
        warn("No item name provided to equipItem")
        return false
    end

    if not equipRemote or not inventoryRemote then
        warn("Required remotes not available for equipping")
        return false
    end

    -- Wait for the item to potentially appear in inventory
    wait(0.5)

    local profile = safeRequire(replicatedStorage.Modules.ProfileData)
    if not profile then
        warn("Could not access profile data")
        return false
    end

    local weapons = profile.Weapons
    if not weapons or not weapons.Owned then
        warn("Invalid weapons data structure")
        return false
    end

    if weapons.Owned[itemName] and weapons.Owned[itemName] > 0 then
        local success, err = pcall(function()
            equipRemote:FireServer(itemName)
            weapons.Equipped = itemName
            inventoryRemote:FireServer(weapons)
        end)

        if not success then
            warn("Error equipping item:", err)
            return false
        end
        return true
    else
        warn("Item not found in inventory:", itemName)
        return false
    end
end

-- Item name conversion with error handling
local function getrawnamebyrealname(realname)
    if not realname or realname == "" then return nil end
    if not itemdatabase then return nil end

    realname = realname:lower()
    for name in pairs(itemdatabase) do
        if realname == name:lower() then
            return name
        end
    end
    return nil
end

-- Image lookup with error handling
local function getImage(iname)
    if not iname or iname == "" then return nil end
    if not itemdatabase then return nil end

    iname = iname:lower()
    for name, info in pairs(itemdatabase) do
        if iname == name:lower() and info.Image then
            return info.Image
        end
    end
    return nil
end

-- Create the UI with error handling
local success, window = pcall(function()
    return Rayfield:CreateWindow({
        Name = "Item Spawner",
        LoadingTitle = "Loading Item Spawner",
        LoadingSubtitle = "by Heavenbatumbading",
        ConfigurationSaving = {
            Enabled = false
        },
        Discord = {
            Enabled = false
        },
        KeySystem = false
    })
end)

if not success or not window then
    warn("Failed to create Rayfield window")
    return
end

-- Create the main tab
local mainTab = window:CreateTab("Main", 4483362458)
mainTab:CreateSection("Item Spawning")

-- Item input
local input = mainTab:CreateInput({
    Name = "Item Name",
    PlaceholderText = "Enter item name",
    RemoveTextAfterFocusLost = false,
    Callback = function(Value)
        getgenv().newValue = getrawnamebyrealname(Value) or Value
    end,
})

-- Spawn button
mainTab:CreateButton({
    Name = "Spawn Item",
    Callback = function()
        if not getgenv().newValue or getgenv().newValue == "" then
            Rayfield:Notify({
                Title = "Error",
                Content = "Please enter an item name first",
                Duration = 3,
            })
            return
        end

        local spawned = opencrate(getgenv().newValue)
        if spawned then
            Rayfield:Notify({
                Title = "Success",
                Content = "Spawned " .. getgenv().newValue,
                Duration = 3,
            })
            
            -- Try to equip after spawning
            task.delay(1, function()
                local equipped = equipItem(getgenv().newValue)
                if equipped then
                    Rayfield:Notify({
                        Title = "Success",
                        Content = "Equipped " .. getgenv().newValue,
                        Duration = 3,
                    })
                end
            end)
        else
            Rayfield:Notify({
                Title = "Error",
                Content = "Failed to spawn item",
                Duration = 3,
            })
        end
    end,
})

-- Manual equip button
mainTab:CreateButton({
    Name = "Equip Item",
    Callback = function()
        if not getgenv().newValue or getgenv().newValue == "" then
            Rayfield:Notify({
                Title = "Error",
                Content = "No item selected to equip",
                Duration = 3,
            })
            return
        end

        local equipped = equipItem(getgenv().newValue)
        if equipped then
            Rayfield:Notify({
                Title = "Success",
                Content = "Equipped " .. getgenv().newValue,
                Duration = 3,
            })
        else
            Rayfield:Notify({
                Title = "Error",
                Content = "Failed to equip " .. getgenv().newValue,
                Duration = 3,
            })
        end
    end,
})

-- Debug section
local debugTab = window:CreateTab("Debug", 4483362458)
debugTab:CreateSection("Debug Information")

debugTab:CreateLabel("Game Loaded: " .. tostring(game:IsLoaded()))
debugTab:CreateLabel("Rayfield Loaded: " .. tostring(Rayfield ~= nil))
debugTab:CreateLabel("BoxModule Available: " .. tostring(boxmodule ~= nil))
debugTab:CreateLabel("ItemDatabase Available: " .. tostring(itemdatabase ~= nil))
debugTab:CreateLabel("Equip Remote Available: " .. tostring(equipRemote ~= nil))

-- Load the UI
Rayfield:LoadConfiguration()
